{-# OPTIONS --safe --without-K #-}

open import Level

module Functions.Raw (‚Ñì : Level) where

import Function as F
open import Data.Product as √ó using (_,_; proj‚ÇÅ; proj‚ÇÇ; <_,_>)
import Data.Bool as B

open import Categorical.Raw
open import Categorical.Equiv

open import Functions.Type ‚Ñì public

module ‚Üí-raw-instances where

  instance

    category : Category Function
    category = record { id = F.id ; _‚àò_ = F._‚àò‚Ä≤_ }

    cartesian : Cartesian Function
    cartesian = record { _‚ñµ_ = <_,_> ; exl = proj‚ÇÅ ; exr = proj‚ÇÇ }

    cartesianClosed : CartesianClosed Function
    cartesianClosed = record { curry = √ó.curry ; apply = √ó.uncurry id }

    logic : Logic Function
    logic = record
              { false = Œª tt ‚Üí ùïó
              ; true  = Œª tt ‚Üí ùï•
              ; not   = lift‚ÇÅ B.not
              ; ‚àß     = uncurry (lift‚ÇÇ B._‚àß_)
              ; ‚à®     = uncurry (lift‚ÇÇ B._‚à®_)
              ; xor   = uncurry (lift‚ÇÇ B._xor_)
              ; cond  = Œª (lift c , e , t) ‚Üí B.if c then t else e
              }

    open import Relation.Binary.PropositionalEquality as ‚â° using (_‚â°_; _‚âó_)

    -- TODO: move to Relation.Binary.PropositionalEquality.Properties as a PR
    equivalent : Equivalent ‚Ñì Function
    equivalent = record
      { _‚âà_ = _‚âó_
      ; equiv = record
          { refl  = Œª _ ‚Üí ‚â°.refl
          ; sym   = Œª f‚àºg x ‚Üí ‚â°.sym (f‚àºg x)
          ; trans = Œª f‚àºg g‚àºh x ‚Üí ‚â°.trans (f‚àºg x) (g‚àºh x)
          }
      }

    -- Experiment. If we're about to copy this pattern, instead define a
    -- parametrized module that can be imported publicly.
    open import Categorical.Homomorphism
    H‚Çí : Homomorphism‚Çí (Set ‚Ñì) (Set ‚Ñì)
    H‚Çí = id-H‚Çí
    H : Homomorphism Function Function
    H = id-H
    catH : CategoryH Function Function
    catH = id-CategoryH
